name: Build and Release Go Binaries

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      mac-broker-binary: ${{ steps.build-broker-macos.outputs.binary-path }}
      linux-broker-binary: ${{ steps.build-broker-linux.outputs.binary-path }}
      windows-broker-binary: ${{ steps.build-broker-windows.outputs.binary-path }}
      mac-cli-binary: ${{ steps.build-cli-macos.outputs.binary-path }}
      linux-cli-binary: ${{ steps.build-cli-linux.outputs.binary-path }}
      windows-cli-binary: ${{ steps.build-cli-windows.outputs.binary-path }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
      - name: Build macOS Broker Binary
        id: build-broker-macos
        run: |
          make build-broker-macos
          echo "binary-path=./bin/broker-macos" >> $GITHUB_OUTPUT
      - name: Build Linux Broker Binary
        id: build-broker-linux
        run: |
          make build-broker-linux
          echo "binary-path=./bin/broker-linux" >> $GITHUB_OUTPUT
      - name: Build Windows Broker Binary
        id: build-broker-windows
        run: |
          make build-broker
          echo "binary-path=./bin/broker.exe" >> $GITHUB_OUTPUT
      - name: Build macOS CLI Binary
        id: build-cli-macos
        run: |
          make build-cli-macos
          echo "binary-path=./bin/cli-macos" >> $GITHUB_OUTPUT
      - name: Build Linux CLI Binary
        id: build-cli-linux
        run: |
          make build-cli-linux
          echo "binary-path=./bin/cli-linux" >> $GITHUB_OUTPUT
      - name: Build Windows CLI Binary
        id: build-cli-windows
        run: |
          make build-cli
          echo "binary-path=./bin/cli.exe" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
      - name: Run Tests
        run: make run-tests

  release:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set Tag Version
        run: echo "VERSION=$(cat ./.github/version.txt)" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "${{ env.VERSION }}"
          release_name: "GoMQ ${{ env.VERSION }}: Initial Release"
          draft: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload macOS Broker Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.mac-broker-binary }}
          asset_name: broker-macos
          asset_content_type: application/octet-stream
      - name: Upload Linux Broker Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.linux-broker-binary }}
          asset_name: broker-linux
          asset_content_type: application/octet-stream
      - name: Upload Windows Broker Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.windows-broker-binary }}
          asset_name: broker.exe
          asset_content_type: application/octet-stream
      - name: Upload macOS CLI Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.mac-cli-binary }}
          asset_name: cli-macos
          asset_content_type: application/octet-stream
      - name: Upload Linux CLI Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.linux-cli-binary }}
          asset_name: cli-linux
          asset_content_type: application/octet-stream
      - name: Upload Windows CLI Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.windows-cli-binary }}
          asset_name: cli.exe
          asset_content_type: application/octet-stream

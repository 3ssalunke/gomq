// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: shared/pkg/proto/cluster.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterSyncClient is the client API for ClusterSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterSyncClient interface {
	SyncCluster(ctx context.Context, in *SyncClusterStateRequest, opts ...grpc.CallOption) (*SyncClusterStateResponse, error)
	BroadCastMessageToPeer(ctx context.Context, in *BroadCastMessageToPeerRequest, opts ...grpc.CallOption) (*SyncClusterStateResponse, error)
}

type clusterSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterSyncClient(cc grpc.ClientConnInterface) ClusterSyncClient {
	return &clusterSyncClient{cc}
}

func (c *clusterSyncClient) SyncCluster(ctx context.Context, in *SyncClusterStateRequest, opts ...grpc.CallOption) (*SyncClusterStateResponse, error) {
	out := new(SyncClusterStateResponse)
	err := c.cc.Invoke(ctx, "/gomq.cluster.ClusterSync/SyncCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterSyncClient) BroadCastMessageToPeer(ctx context.Context, in *BroadCastMessageToPeerRequest, opts ...grpc.CallOption) (*SyncClusterStateResponse, error) {
	out := new(SyncClusterStateResponse)
	err := c.cc.Invoke(ctx, "/gomq.cluster.ClusterSync/BroadCastMessageToPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterSyncServer is the server API for ClusterSync service.
// All implementations must embed UnimplementedClusterSyncServer
// for forward compatibility
type ClusterSyncServer interface {
	SyncCluster(context.Context, *SyncClusterStateRequest) (*SyncClusterStateResponse, error)
	BroadCastMessageToPeer(context.Context, *BroadCastMessageToPeerRequest) (*SyncClusterStateResponse, error)
	mustEmbedUnimplementedClusterSyncServer()
}

// UnimplementedClusterSyncServer must be embedded to have forward compatible implementations.
type UnimplementedClusterSyncServer struct {
}

func (UnimplementedClusterSyncServer) SyncCluster(context.Context, *SyncClusterStateRequest) (*SyncClusterStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCluster not implemented")
}
func (UnimplementedClusterSyncServer) BroadCastMessageToPeer(context.Context, *BroadCastMessageToPeerRequest) (*SyncClusterStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadCastMessageToPeer not implemented")
}
func (UnimplementedClusterSyncServer) mustEmbedUnimplementedClusterSyncServer() {}

// UnsafeClusterSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterSyncServer will
// result in compilation errors.
type UnsafeClusterSyncServer interface {
	mustEmbedUnimplementedClusterSyncServer()
}

func RegisterClusterSyncServer(s grpc.ServiceRegistrar, srv ClusterSyncServer) {
	s.RegisterService(&ClusterSync_ServiceDesc, srv)
}

func _ClusterSync_SyncCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncClusterStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterSyncServer).SyncCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.cluster.ClusterSync/SyncCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterSyncServer).SyncCluster(ctx, req.(*SyncClusterStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterSync_BroadCastMessageToPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadCastMessageToPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterSyncServer).BroadCastMessageToPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.cluster.ClusterSync/BroadCastMessageToPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterSyncServer).BroadCastMessageToPeer(ctx, req.(*BroadCastMessageToPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterSync_ServiceDesc is the grpc.ServiceDesc for ClusterSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gomq.cluster.ClusterSync",
	HandlerType: (*ClusterSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncCluster",
			Handler:    _ClusterSync_SyncCluster_Handler,
		},
		{
			MethodName: "BroadCastMessageToPeer",
			Handler:    _ClusterSync_BroadCastMessageToPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/pkg/proto/cluster.proto",
}

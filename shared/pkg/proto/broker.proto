syntax = "proto3";

option go_package = "./protoc";
package gomq.broker;

message Message {
  string id = 1;
  bytes payload = 2; // payload of any type
  int64 timestamp = 3;
}

message Exchange {
  string name = 1;
  string type = 2;
  string schema = 3; // protobuf message schema in string form
}

message Queue {
  string name = 1;
  bool dlq = 2;
  int32 max_retries = 3;
}

message Binding {
  string exchange = 1;
  string queue = 2;
  string routing_key = 3;
}

message PublishMessageRequest {
  string exchange = 1;
  string routing_key = 2;
  Message message = 3;
}

message RetrieveMessagesRequest {
  string queue = 1;
  int32 count = 2;
}

message RetrieveMessagesResponse {
  bool status = 1;
  string message = 2;
  repeated Message messages = 3;
}

message MessageAckRequest {
  string queue = 1;
  string messsage_id = 2;
}

message BrokerResponse {
  bool status = 1;
  string message = 2;
}

message RemoveExchangeRequest {
  string exchange_name = 1;
}

message RemoveQueueRequest {
  string queue_name = 1;
  string exchange_name = 2;
}

message GetExchangeSchemaRequest {
  string exchange_name = 1;
}

message GetExchangeSchemaResponse{
  bool status = 1;
  string message = 2;
  string schema = 3;
}

message CreateUserRequest{
  string username = 1;
  string role = 2;
}

message CreateUserResponse{
  bool status = 1;
  string message = 2;
  string api_key = 3;
}

service BrokerService {
  rpc CreateExchange(Exchange) returns (BrokerResponse);
  rpc RemoveExchange(RemoveExchangeRequest) returns (BrokerResponse);
  rpc CreateQueue(Queue) returns (BrokerResponse);
  rpc RemoveQueue(RemoveQueueRequest) returns (BrokerResponse);
  rpc BindQueue(Binding) returns (BrokerResponse);
  rpc PublishMessage(PublishMessageRequest) returns (BrokerResponse);
  rpc RetrieveMessages(RetrieveMessagesRequest) returns (RetrieveMessagesResponse);
  rpc ConsumeMessages(Queue) returns (stream Message);
  rpc MessageAcknowledge(MessageAckRequest) returns (BrokerResponse);
  rpc RedriveDlqMessages(Queue) returns (BrokerResponse);
  rpc GetExchangeSchema(GetExchangeSchemaRequest) returns (GetExchangeSchemaResponse);
  rpc CreateAdmin(CreateUserRequest) returns (CreateUserResponse);
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
}
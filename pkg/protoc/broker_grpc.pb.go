// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: pkg/proto/broker.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerServiceClient interface {
	CreateExchange(ctx context.Context, in *Exchange, opts ...grpc.CallOption) (*BrokerResponse, error)
	RemoveExchange(ctx context.Context, in *RemoveExchangeRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	CreateQueue(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*BrokerResponse, error)
	RemoveQueue(ctx context.Context, in *RemoveQueueRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	BindQueue(ctx context.Context, in *Binding, opts ...grpc.CallOption) (*BrokerResponse, error)
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	RetrieveMessages(ctx context.Context, in *RetrieveMessagesRequest, opts ...grpc.CallOption) (*RetrieveMessagesResponse, error)
	ConsumeMessages(ctx context.Context, in *Queue, opts ...grpc.CallOption) (BrokerService_ConsumeMessagesClient, error)
	MessageAcknowledge(ctx context.Context, in *MessageAckRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	RedriveDlqMessages(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*BrokerResponse, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) CreateExchange(ctx context.Context, in *Exchange, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/CreateExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) RemoveExchange(ctx context.Context, in *RemoveExchangeRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/RemoveExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) CreateQueue(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) RemoveQueue(ctx context.Context, in *RemoveQueueRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/RemoveQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) BindQueue(ctx context.Context, in *Binding, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/BindQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/PublishMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) RetrieveMessages(ctx context.Context, in *RetrieveMessagesRequest, opts ...grpc.CallOption) (*RetrieveMessagesResponse, error) {
	out := new(RetrieveMessagesResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/RetrieveMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ConsumeMessages(ctx context.Context, in *Queue, opts ...grpc.CallOption) (BrokerService_ConsumeMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BrokerService_ServiceDesc.Streams[0], "/gomq.broker.BrokerService/ConsumeMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerServiceConsumeMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BrokerService_ConsumeMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type brokerServiceConsumeMessagesClient struct {
	grpc.ClientStream
}

func (x *brokerServiceConsumeMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerServiceClient) MessageAcknowledge(ctx context.Context, in *MessageAckRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/MessageAcknowledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) RedriveDlqMessages(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/RedriveDlqMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility
type BrokerServiceServer interface {
	CreateExchange(context.Context, *Exchange) (*BrokerResponse, error)
	RemoveExchange(context.Context, *RemoveExchangeRequest) (*BrokerResponse, error)
	CreateQueue(context.Context, *Queue) (*BrokerResponse, error)
	RemoveQueue(context.Context, *RemoveQueueRequest) (*BrokerResponse, error)
	BindQueue(context.Context, *Binding) (*BrokerResponse, error)
	PublishMessage(context.Context, *PublishMessageRequest) (*BrokerResponse, error)
	RetrieveMessages(context.Context, *RetrieveMessagesRequest) (*RetrieveMessagesResponse, error)
	ConsumeMessages(*Queue, BrokerService_ConsumeMessagesServer) error
	MessageAcknowledge(context.Context, *MessageAckRequest) (*BrokerResponse, error)
	RedriveDlqMessages(context.Context, *Queue) (*BrokerResponse, error)
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServiceServer struct {
}

func (UnimplementedBrokerServiceServer) CreateExchange(context.Context, *Exchange) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchange not implemented")
}
func (UnimplementedBrokerServiceServer) RemoveExchange(context.Context, *RemoveExchangeRequest) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveExchange not implemented")
}
func (UnimplementedBrokerServiceServer) CreateQueue(context.Context, *Queue) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedBrokerServiceServer) RemoveQueue(context.Context, *RemoveQueueRequest) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQueue not implemented")
}
func (UnimplementedBrokerServiceServer) BindQueue(context.Context, *Binding) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindQueue not implemented")
}
func (UnimplementedBrokerServiceServer) PublishMessage(context.Context, *PublishMessageRequest) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedBrokerServiceServer) RetrieveMessages(context.Context, *RetrieveMessagesRequest) (*RetrieveMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMessages not implemented")
}
func (UnimplementedBrokerServiceServer) ConsumeMessages(*Queue, BrokerService_ConsumeMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeMessages not implemented")
}
func (UnimplementedBrokerServiceServer) MessageAcknowledge(context.Context, *MessageAckRequest) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAcknowledge not implemented")
}
func (UnimplementedBrokerServiceServer) RedriveDlqMessages(context.Context, *Queue) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedriveDlqMessages not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_CreateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Exchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).CreateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/CreateExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).CreateExchange(ctx, req.(*Exchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_RemoveExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RemoveExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/RemoveExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RemoveExchange(ctx, req.(*RemoveExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Queue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).CreateQueue(ctx, req.(*Queue))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_RemoveQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RemoveQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/RemoveQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RemoveQueue(ctx, req.(*RemoveQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_BindQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Binding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).BindQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/BindQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).BindQueue(ctx, req.(*Binding))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/PublishMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).PublishMessage(ctx, req.(*PublishMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_RetrieveMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RetrieveMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/RetrieveMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RetrieveMessages(ctx, req.(*RetrieveMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ConsumeMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Queue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServiceServer).ConsumeMessages(m, &brokerServiceConsumeMessagesServer{stream})
}

type BrokerService_ConsumeMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type brokerServiceConsumeMessagesServer struct {
	grpc.ServerStream
}

func (x *brokerServiceConsumeMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _BrokerService_MessageAcknowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).MessageAcknowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/MessageAcknowledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).MessageAcknowledge(ctx, req.(*MessageAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_RedriveDlqMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Queue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RedriveDlqMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/RedriveDlqMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RedriveDlqMessages(ctx, req.(*Queue))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gomq.broker.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExchange",
			Handler:    _BrokerService_CreateExchange_Handler,
		},
		{
			MethodName: "RemoveExchange",
			Handler:    _BrokerService_RemoveExchange_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _BrokerService_CreateQueue_Handler,
		},
		{
			MethodName: "RemoveQueue",
			Handler:    _BrokerService_RemoveQueue_Handler,
		},
		{
			MethodName: "BindQueue",
			Handler:    _BrokerService_BindQueue_Handler,
		},
		{
			MethodName: "PublishMessage",
			Handler:    _BrokerService_PublishMessage_Handler,
		},
		{
			MethodName: "RetrieveMessages",
			Handler:    _BrokerService_RetrieveMessages_Handler,
		},
		{
			MethodName: "MessageAcknowledge",
			Handler:    _BrokerService_MessageAcknowledge_Handler,
		},
		{
			MethodName: "RedriveDlqMessages",
			Handler:    _BrokerService_RedriveDlqMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeMessages",
			Handler:       _BrokerService_ConsumeMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/broker.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: pkg/proto/broker.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerServiceClient interface {
	CreateExchange(ctx context.Context, in *Exchange, opts ...grpc.CallOption) (*BrokerResponse, error)
	CreateQueue(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*BrokerResponse, error)
	BindQueue(ctx context.Context, in *Binding, opts ...grpc.CallOption) (*BrokerResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	Consume(ctx context.Context, in *Queue, opts ...grpc.CallOption) (BrokerService_ConsumeClient, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) CreateExchange(ctx context.Context, in *Exchange, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/CreateExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) CreateQueue(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) BindQueue(ctx context.Context, in *Binding, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/BindQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/gomq.broker.BrokerService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) Consume(ctx context.Context, in *Queue, opts ...grpc.CallOption) (BrokerService_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &BrokerService_ServiceDesc.Streams[0], "/gomq.broker.BrokerService/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerServiceConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BrokerService_ConsumeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type brokerServiceConsumeClient struct {
	grpc.ClientStream
}

func (x *brokerServiceConsumeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility
type BrokerServiceServer interface {
	CreateExchange(context.Context, *Exchange) (*BrokerResponse, error)
	CreateQueue(context.Context, *Queue) (*BrokerResponse, error)
	BindQueue(context.Context, *Binding) (*BrokerResponse, error)
	Publish(context.Context, *PublishRequest) (*BrokerResponse, error)
	Consume(*Queue, BrokerService_ConsumeServer) error
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServiceServer struct {
}

func (UnimplementedBrokerServiceServer) CreateExchange(context.Context, *Exchange) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchange not implemented")
}
func (UnimplementedBrokerServiceServer) CreateQueue(context.Context, *Queue) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedBrokerServiceServer) BindQueue(context.Context, *Binding) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindQueue not implemented")
}
func (UnimplementedBrokerServiceServer) Publish(context.Context, *PublishRequest) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedBrokerServiceServer) Consume(*Queue, BrokerService_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_CreateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Exchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).CreateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/CreateExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).CreateExchange(ctx, req.(*Exchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Queue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).CreateQueue(ctx, req.(*Queue))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_BindQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Binding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).BindQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/BindQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).BindQueue(ctx, req.(*Binding))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomq.broker.BrokerService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Queue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServiceServer).Consume(m, &brokerServiceConsumeServer{stream})
}

type BrokerService_ConsumeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type brokerServiceConsumeServer struct {
	grpc.ServerStream
}

func (x *brokerServiceConsumeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gomq.broker.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExchange",
			Handler:    _BrokerService_CreateExchange_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _BrokerService_CreateQueue_Handler,
		},
		{
			MethodName: "BindQueue",
			Handler:    _BrokerService_BindQueue_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _BrokerService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _BrokerService_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/broker.proto",
}
